/*
 * generated by Xtext 2.12.0
 */
package tmodel.grm.trm.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import tmodel.Add;
import tmodel.Delete;
import tmodel.LoadMetaModel;
import tmodel.LoadModel;
import tmodel.MAttribute;
import tmodel.Runner;
import tmodel.TmodelPackage;
import tmodel.Update;
import tmodel.WhereClause;
import tmodel.grm.trm.services.TrmGrammarAccess;

@SuppressWarnings("all")
public class TrmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TrmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TmodelPackage.ADD:
				sequence_Add(context, (Add) semanticObject); 
				return; 
			case TmodelPackage.DELETE:
				sequence_Delete(context, (Delete) semanticObject); 
				return; 
			case TmodelPackage.LOAD_META_MODEL:
				sequence_LoadMetaModel(context, (LoadMetaModel) semanticObject); 
				return; 
			case TmodelPackage.LOAD_MODEL:
				sequence_LoadModel(context, (LoadModel) semanticObject); 
				return; 
			case TmodelPackage.MATTRIBUTE:
				sequence_MAttribute(context, (MAttribute) semanticObject); 
				return; 
			case TmodelPackage.RUNNER:
				sequence_Runner(context, (Runner) semanticObject); 
				return; 
			case TmodelPackage.UPDATE:
				sequence_Update(context, (Update) semanticObject); 
				return; 
			case TmodelPackage.WHERE_CLAUSE:
				sequence_WhereClause(context, (WhereClause) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Operation returns Add
	 *     Add returns Add
	 *
	 * Constraint:
	 *     (cibleElement=EString in=EString? (attributes+=MAttribute attributes+=MAttribute*)? whereClause=WhereClause?)
	 */
	protected void sequence_Add(ISerializationContext context, Add semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Delete
	 *     Delete returns Delete
	 *
	 * Constraint:
	 *     (cibleElement=EString whereClause=WhereClause?)
	 */
	protected void sequence_Delete(ISerializationContext context, Delete semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Loader returns LoadMetaModel
	 *     LoadMetaModel returns LoadMetaModel
	 *
	 * Constraint:
	 *     url=EString
	 */
	protected void sequence_LoadMetaModel(ISerializationContext context, LoadMetaModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TmodelPackage.Literals.LOADER__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmodelPackage.Literals.LOADER__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoadMetaModelAccess().getUrlEStringParserRuleCall_3_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Loader returns LoadModel
	 *     LoadModel returns LoadModel
	 *
	 * Constraint:
	 *     url=EString
	 */
	protected void sequence_LoadModel(ISerializationContext context, LoadModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TmodelPackage.Literals.LOADER__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmodelPackage.Literals.LOADER__URL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLoadModelAccess().getUrlEStringParserRuleCall_3_0(), semanticObject.getUrl());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MAttribute returns MAttribute
	 *
	 * Constraint:
	 *     (name=ID value=EString)
	 */
	protected void sequence_MAttribute(ISerializationContext context, MAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TmodelPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmodelPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, TmodelPackage.Literals.MATTRIBUTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TmodelPackage.Literals.MATTRIBUTE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMAttributeAccess().getValueEStringParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Runner returns Runner
	 *
	 * Constraint:
	 *     (loader+=Loader loader+=Loader operations+=Operation operations+=Operation*)
	 */
	protected void sequence_Runner(ISerializationContext context, Runner semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Update
	 *     Update returns Update
	 *
	 * Constraint:
	 *     (cibleElement=EString attributes+=MAttribute attributes+=MAttribute* whereClause=WhereClause?)
	 */
	protected void sequence_Update(ISerializationContext context, Update semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WhereClause returns WhereClause
	 *
	 * Constraint:
	 *     (conditions+=MAttribute conditions+=MAttribute*)
	 */
	protected void sequence_WhereClause(ISerializationContext context, WhereClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
